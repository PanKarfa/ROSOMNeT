//
// Generated file, do not edit! Created by nedtool 4.6 from IEEE802154.msg.
//

#ifndef _IEEE802154_M_H_
#define _IEEE802154_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>IEEE802154.msg:15</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * packet IEEE802154Packet
 * {
 *     unsigned char data[1024];
 * }
 * </pre>
 */
class IEEE802154Packet : public ::cPacket
{
  protected:
    unsigned char data_var[1024];

  private:
    void copy(const IEEE802154Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IEEE802154Packet&);

  public:
    IEEE802154Packet(const char *name=NULL, int kind=0);
    IEEE802154Packet(const IEEE802154Packet& other);
    virtual ~IEEE802154Packet();
    IEEE802154Packet& operator=(const IEEE802154Packet& other);
    virtual IEEE802154Packet *dup() const {return new IEEE802154Packet(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getDataArraySize() const;
    virtual unsigned char getData(unsigned int k) const;
    virtual void setData(unsigned int k, unsigned char data);
};

inline void doPacking(cCommBuffer *b, IEEE802154Packet& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, IEEE802154Packet& obj) {obj.parsimUnpack(b);}


#endif // ifndef _IEEE802154_M_H_

